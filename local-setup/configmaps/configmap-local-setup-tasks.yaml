apiVersion: v1
kind: ConfigMap
metadata:
  name: local-setup-tasks
  namespace: coralberryfairy
data:
  main.yaml: |
    ---

    - name: Get postgres pod by label
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: postgres
        label_selectors:
          - postgres-operator.crunchydata.com/role=master
      register: postgres_pod_info
    - name: Set postgres pod name
      set_fact:
        POSTGRES_POD_NAME: "{{ postgres_pod_info.resources[0].metadata.name }}"
    - name: "Create database user {{ DATABASE_USERNAME }}"
      kubernetes.core.k8s_exec:
        namespace: postgres
        pod: "{{ POSTGRES_POD_NAME }}"
        command: >-
          env psql -U postgres postgres -c 
          "create user {{ DATABASE_USERNAME }} password '{{ DATABASE_PASSWORD }}';"
      ignore_errors: true
      register: create_database_user
    - name: Test create database user
      fail:
        msg: "{{ command_status }}"
      when: create_database_user.failed and create_database_user is not search("already exists")
    - name: "Create database {{ DATABASE_DATABASE }}"
      kubernetes.core.k8s_exec:
        namespace: postgres
        pod: "{{ POSTGRES_POD_NAME }}"
        command: >-
          env psql -U postgres postgres -c 
          "create database {{ DATABASE_DATABASE }} owner {{ DATABASE_USERNAME }};"
      ignore_errors: true
      register: create_database
    - name: Test create database
      fail:
        msg: "{{ command_status }}"
      when: create_database.failed and create_database is not search("already exists")

    - name: >-
        Create {{ SOLR_COLLECTION }} collection: 
        SOLR_AUTH_TYPE=basic 
        SOLR_AUTHENTICATION_OPTS="-Dbasicauth=admin:{{ SOLR_PASSWORD }}" 
        /opt/solr/bin/solr create_collection --solr-url http://localhost:8983 -c {{ SOLR_COLLECTION }} -n computate'
      kubernetes.core.k8s_exec:
        namespace: solr
        pod: solr-solrcloud-0
        command: >-
          bash -c '
          SOLR_AUTH_TYPE=basic
          SOLR_AUTHENTICATION_OPTS="-Dbasicauth=admin:{{ SOLR_PASSWORD }}" 
          /opt/solr/bin/solr create_collection --solr-url http://localhost:8983 -c {{ SOLR_COLLECTION }} -n computate
          '
      register: create_collection
      ignore_errors: true
    - name: Debug create_collection
      debug:
        var: create_collection
    - name: Test create {{ SOLR_COLLECTION }} collection success
      fail:
        msg: "{{ command_status }}"
      when: create_collection.failed and create_collection is not search("already exists")

    - name: Get a new Keycloak client secret, passing client_id instead of id
      community.general.keycloak_clientsecret_info:
        validate_certs: false
        auth_client_id: admin-cli
        auth_keycloak_url: "{{ AUTH_URL }}"
        auth_realm: master
        auth_username: "{{ AUTH_ADMIN_USERNAME }}"
        auth_password: "{{ AUTH_ADMIN_PASSWORD }}"
        client_id: '{{ AUTH_CLIENT }}'
        realm: "{{ AUTH_REALM }}"
      register: AUTH_CLIENT_SECRET
    - name: Set AUTH_SECRET variable
      set_fact:
        AUTH_SECRET: "{{ AUTH_CLIENT_SECRET.clientsecret_info.value }}"

    - name: "Create a zookeeper secret in namespace {{ SITE_NAMESPACE }}"
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'zookeeper-secret.yaml') }}"
        validate_certs: false
    - name: "Create a solr secret in namespace {{ SITE_NAMESPACE }}"
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'solr-secret.yaml') }}"
        validate_certs: false
    - name: "Create a database secret in namespace {{ SITE_NAMESPACE }}"
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'database-secret.yaml') }}"
        validate_certs: false
    - name: "Create a auth secret in namespace {{ SITE_NAMESPACE }}"
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'auth-secret.yaml') }}"
        validate_certs: false
    - name: "Create a context-broker secret in namespace {{ SITE_NAMESPACE }}"
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'context-broker-secret.yaml') }}"
        validate_certs: false
    - name: "Create a site secret in namespace {{ SITE_NAMESPACE }}"
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'site-secret.yaml') }}"
        validate_certs: false
    - name: "Create a font-awesome secret in namespace {{ SITE_NAMESPACE }}"
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'font-awesome-secret.yaml') }}"
        validate_certs: false
      when: query('kubernetes.core.k8s', kind='Secret', resource_name=WEB_COMPONENTS_SECRET, namespace=SITE_NAMESPACE) | length == 0
    - name: "Create an extra secret in namespace {{ SITE_NAMESPACE }}"
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'extra-secret.yaml') }}"
        validate_certs: false
      when: query('kubernetes.core.k8s', kind='Secret', resource_name='local-extra', namespace=SITE_NAMESPACE) | length == 0
